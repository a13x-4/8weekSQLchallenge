1. How many customers has Foodie-Fi ever had?
SELECT
  COUNT(*) AS total_customers
FROM subscriptions;

2. What is the monthly distribution of trial plan start_date values for our dataset - use the start of the month as the group by value
SELECT
  DATE_TRUNC('week', start_date)::DATE AS month_start,
  COUNT(*) AS trial_customers
FROM foodie_fi.subscriptions
WHERE plan_id = 0
GROUP BY month_start
ORDER BY month_start;

3. What plan start_date values occur after the year 2020 for our dataset? Show the breakdown by count of events for each plan_name
SELECT
  plans.plan_id,
  plan_name,
  COUNT(*) AS events
FROM foodie_fi.subscriptions
INNER JOIN plans
  ON subscriptions.plan_id = plans.plan_id
WHERE start_date < '2020-12-31'
GROUP BY plan_name, plan_id
ORDER BY plan_id;

4. What is the customer count and percentage of customers who have churned rounded to 1 decimal place?
SELECT
  SUM(CASE WHEN plan_id = 3 THEN 1 ELSE 0 END) AS churn_customers,
  ROUND(
    100 * SUM(CASE WHEN plan_id = 3 THEN 1 ELSE 0 END) /
      COUNT(DISTINCT customer_id)
  ) AS percentage
FROM foodie_fi.subscriptions; 

5. How many customers have churned straight after their initial free trial - what percentage is this rounded to 1 decimal place?

WITH ranked_plans AS (
  SELECT
    customer_id,
    plan_id,
    ROW_NUMBER() OVER (
      PARTITION BY customer_id
      ORDER BY start_date DESC
    ) AS plan_rank
  FROM foodie_fi.subscriptions
)
SELECT
  SUM(CASE WHEN plan_id = 4 THEN 1 ELSE 0 END) AS churn_customers,
  ROUND(
    100 * SUM(CASE WHEN plan_id = 4 THEN 1 ELSE 0 END) /
    COUNT(*)
  ) AS percentage
FROM ranked_plans
WHERE plan_rank = 2;

6. What is the number and percentage of customer plans after their initial free trial?

WITH ranked_plans AS (
  SELECT
    customer_id,
    plan_id,
    ROW_NUMBER() OVER (
      PARTITION BY customer_id
      ORDER BY start_date DESC
    ) AS plan_rank
  FROM foodie_fi.subscriptions
)
SELECT
  plans.plan_id,
  plans.plan_name,
  COUNT(*) AS customer_count,
  ROUND(100 * COUNT(*) / SUM(COUNT(*)) OVER ()) AS percentage
FROM ranked_plans
INNER JOIN foodie_fi.plans
  ON ranked_plans.plan_id = plans.plan_id
WHERE plan_rank = 1
GROUP BY plans.plan_id, plans.plan_name
ORDER BY plans.plan_id;