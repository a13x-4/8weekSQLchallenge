
1. How many pizzas were ordered?

SELECT COUNT(*) 
FROM pizza_runner.customer_orders;


2. How many unique customer orders were made?

SELECT COUNT(DISTINCT order_id) 
FROM pizza_runner.customer_orders;

3.How many successful orders were delivered by each runner?

SELECT
  runner_id,
  COUNT(DISTINCT order_id) AS successful_orders
FROM pizza_runner.runner_orders
WHERE cancellation IS NULL
  OR cancellation NOT IN ('Restaurant Cancellation', 'Customer Cancellation')
GROUP BY runner_id
ORDER BY successful_orders DESC;

4. How many of each type of pizza was delivered?

SELECT
  t2.pizza_name,
  COUNT(t1.*) AS delivered_pizza_count
FROM pizza_runner.customer_orders AS t1
INNER JOIN pizza_runner.pizza_names AS t2
  ON t1.pizza_id = t2.pizza_id
WHERE EXISTS (
  SELECT 1 FROM pizza_runner.runner_orders AS t3
  WHERE t1.order_id = t3.order_id
  AND (
    t3.cancellation IS NULL
    OR t3.cancellation NOT IN ('Restaurant Cancellation', 'Customer Cancellation')
  )
)
GROUP BY t2.pizza_name
ORDER BY t2.pizza_name;

5. How many Vegetarian and Meatlovers were ordered by each customer?

SELECT
  customer_id,
  SUM(CASE WHEN pizza_id = 1 THEN 1 ELSE 0 END) AS meatlovers,
  SUM(CASE WHEN pizza_id = 2 THEN 1 ELSE 0 END) AS vegetarian
FROM pizza_runner.customer_orders
GROUP BY customer_id
ORDER BY customer_id;

6. What was the maximum number of pizzas delivered in a single order?

WITH cte_ranked_orders AS (
  SELECT
    order_id,
    COUNT(*) AS pizza_count,
    RANK() OVER (ORDER BY COUNT(*) DESC) AS count_rank
  FROM pizza_runner.customer_orders AS t1
  WHERE EXISTS (
    SELECT 1 FROM pizza_runner.runner_orders AS t2
    WHERE t1.order_id = t2.order_id
    AND (
      t2.cancellation IS NULL
      OR t2.cancellation NOT IN ('Restaurant Cancellation', 'Customer Cancellation')
    )
  )
  GROUP BY order_id
)
SELECT pizza_count FROM ranked_orders_cte WHERE count_rank = 1;

7. For each customer, how many delivered pizzas had at least 1 change and how many had no changes?

WITH cte_cleaned_customer_orders AS (
  SELECT
    order_id,
    customer_id,
    pizza_id,
    CASE WHEN exclusions IN ('null', '') THEN NULL ELSE exclusions END AS exclusions,
    CASE WHEN extras IN ('null', '') THEN NULL ELSE extras END AS extras,
    order_time
  FROM pizza_runner.customer_orders
)
SELECT
  customer_id,
  SUM(
    CASE
      WHEN exclusions IS NOT NULL OR extras IS NOT NULL THEN 1
      ELSE 0
    END
  ) AS at_least_1_change,
  SUM(
    CASE
      WHEN exclusions IS NULL AND extras IS NULL THEN 1
      ELSE 0
    END
  ) AS no_changes
FROM cte_cleaned_customer_orders AS t1
WHERE EXISTS (
  SELECT 1 FROM pizza_runner.runner_orders AS t2
  WHERE t1.order_id = t2.order_id
  AND (
    t2.cancellation IS NULL
    OR t2.cancellation NOT IN ('Restaurant Cancellation', 'Customer Cancellation')
  )
)
GROUP BY customer_id
ORDER BY customer_id;